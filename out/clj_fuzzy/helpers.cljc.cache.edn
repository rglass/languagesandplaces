{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{any?}, :name clj-fuzzy.helpers, :imports nil, :requires {clojure.string clojure.string}, :uses nil, :defs {eat {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 25, :column 7, :end-line 25, :end-column 10, :arglists (quote ([string])), :doc "Drop the first letter of a [string]."}, :name clj-fuzzy.helpers/eat, :variadic false, :file "out/clj_fuzzy/helpers.cljc", :end-column 10, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string])), :doc "Drop the first letter of a [string]."}, trigrams {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 60, :column 7, :end-line 60, :end-column 15, :arglists (quote ([s]))}, :name clj-fuzzy.helpers/trigrams, :variadic false, :file "out/clj_fuzzy/helpers.cljc", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, any? {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 63, :column 8, :end-line 63, :end-column 12, :private true, :arglists (quote ([pred coll])), :doc "Is any of the [coll] item true according to the given [predicate]?"}, :private true, :name clj-fuzzy.helpers/any?, :variadic false, :file "out/clj_fuzzy/helpers.cljc", :end-column 12, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Is any of the [coll] item true according to the given [predicate]?"}, n-grams {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 54, :column 7, :end-line 54, :end-column 14, :arglists (quote ([n s])), :doc "Lazily compute the n-grams of a sequence."}, :name clj-fuzzy.helpers/n-grams, :variadic false, :file "out/clj_fuzzy/helpers.cljc", :end-column 14, :method-params ([n s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n s])), :doc "Lazily compute the n-grams of a sequence."}, bigrams {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 59, :column 7, :end-line 59, :end-column 14, :arglists (quote ([s]))}, :name clj-fuzzy.helpers/bigrams, :variadic false, :file "out/clj_fuzzy/helpers.cljc", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, quadrigrams {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 61, :column 7, :end-line 61, :end-column 18, :arglists (quote ([s]))}, :name clj-fuzzy.helpers/quadrigrams, :variadic false, :file "out/clj_fuzzy/helpers.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, not-in? {:name clj-fuzzy.helpers/not-in?, :file "out/clj_fuzzy/helpers.cljc", :line 73, :column 1, :end-line 73, :end-column 13, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 73, :column 6, :end-line 73, :end-column 13}}, in? {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 68, :column 7, :end-line 68, :end-column 10, :arglists (quote ([string sequence])), :doc "Checks whether a [string] is contained within a [sequence]."}, :name clj-fuzzy.helpers/in?, :variadic false, :file "out/clj_fuzzy/helpers.cljc", :end-column 10, :method-params ([string sequence]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([string sequence])), :doc "Checks whether a [string] is contained within a [sequence]."}, distinct-consecutive {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 50, :column 7, :end-line 50, :end-column 27, :arglists (quote ([sequence])), :doc "Drop consecutive duplicates in sequence"}, :name clj-fuzzy.helpers/distinct-consecutive, :variadic false, :file "out/clj_fuzzy/helpers.cljc", :end-column 27, :method-params ([sequence]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sequence])), :doc "Drop consecutive duplicates in sequence"}, chop {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 20, :column 7, :end-line 20, :end-column 11, :arglists (quote ([string])), :doc "Drop the last character of a [string]."}, :name clj-fuzzy.helpers/chop, :variadic false, :file "out/clj_fuzzy/helpers.cljc", :end-column 11, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string])), :doc "Drop the last character of a [string]."}, clean-non-alphabetical {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 36, :column 7, :end-line 36, :end-column 29, :arglists (quote ([word])), :doc "Drop every non alphabetical character in [word]."}, :name clj-fuzzy.helpers/clean-non-alphabetical, :variadic false, :file "out/clj_fuzzy/helpers.cljc", :end-column 29, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :doc "Drop every non alphabetical character in [word]."}, re-test? {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 43, :column 7, :end-line 43, :end-column 15, :arglists (quote ([regular-expression string])), :doc "Test a [string] against a [regular-expression]."}, :name clj-fuzzy.helpers/re-test?, :variadic false, :file "out/clj_fuzzy/helpers.cljc", :end-column 15, :method-params ([regular-expression string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([regular-expression string])), :doc "Test a [string] against a [regular-expression]."}, batch-replace {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 30, :column 7, :end-line 30, :end-column 20, :arglists (quote ([string replacements])), :doc "Apply several [replacements] to a [string]."}, :name clj-fuzzy.helpers/batch-replace, :variadic false, :file "out/clj_fuzzy/helpers.cljc", :end-column 20, :method-params ([string replacements]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([string replacements])), :doc "Apply several [replacements] to a [string]."}, slice {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/helpers.cljc", :line 14, :column 7, :end-line 14, :end-column 12, :arglists (quote ([string start length])), :doc "Slice a [string] from [start] and up to [length]."}, :name clj-fuzzy.helpers/slice, :variadic false, :file "out/clj_fuzzy/helpers.cljc", :end-column 12, :method-params ([string start length]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 3, :fn-var true, :arglists (quote ([string start length])), :doc "Slice a [string] from [start] and up to [length]."}}, :require-macros nil, :doc nil}