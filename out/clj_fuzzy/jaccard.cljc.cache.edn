{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clj-fuzzy.jaccard, :imports nil, :requires {clojure.set clojure.set}, :uses nil, :defs {index {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/jaccard.cljc", :line 13, :column 7, :end-line 13, :end-column 12, :arglists (quote ([set1 set2])), :doc "Compute the Jaccard index between [set1] and  [set2]."}, :name clj-fuzzy.jaccard/index, :variadic false, :file "out/clj_fuzzy/jaccard.cljc", :end-column 12, :method-params ([set1 set2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([set1 set2])), :doc "Compute the Jaccard index between [set1] and  [set2]."}, distance {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/jaccard.cljc", :line 19, :column 7, :end-line 19, :end-column 15, :arglists (quote ([seq1 seq2])), :doc "Compute the Jaccard distance between [seq1] and [seq2]."}, :name clj-fuzzy.jaccard/distance, :variadic false, :file "out/clj_fuzzy/jaccard.cljc", :end-column 15, :method-params ([seq1 seq2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([seq1 seq2])), :doc "Compute the Jaccard distance between [seq1] and [seq2]."}}, :require-macros nil, :doc nil}