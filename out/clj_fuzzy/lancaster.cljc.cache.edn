{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clj-fuzzy.lancaster, :imports nil, :requires {clj-fuzzy.helpers clj-fuzzy.helpers}, :uses {clean-non-alphabetical clj-fuzzy.helpers, re-test? clj-fuzzy.helpers}, :defs {rules-per-letter {:name clj-fuzzy.lancaster/rules-per-letter, :file "out/clj_fuzzy/lancaster.cljc", :line 14, :column 1, :end-line 14, :end-column 32, :private true, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lancaster.cljc", :line 14, :column 16, :end-line 14, :end-column 32, :private true}}, vowel? {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lancaster.cljc", :line 38, :column 8, :end-line 38, :end-column 14, :private true, :arglists (quote ([string]))}, :private true, :name clj-fuzzy.lancaster/vowel?, :variadic false, :file "out/clj_fuzzy/lancaster.cljc", :end-column 14, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string]))}, acceptable? {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lancaster.cljc", :line 42, :column 8, :end-line 42, :end-column 19, :private true, :arglists (quote ([stem]))}, :private true, :name clj-fuzzy.lancaster/acceptable?, :variadic false, :file "out/clj_fuzzy/lancaster.cljc", :end-column 19, :method-params ([stem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stem]))}, apply-letter-rules {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lancaster.cljc", :line 49, :column 7, :end-line 49, :end-column 25, :arglists (quote ([stem rules intact]))}, :name clj-fuzzy.lancaster/apply-letter-rules, :variadic false, :file "out/clj_fuzzy/lancaster.cljc", :end-column 25, :method-params ([stem rules intact]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 3, :fn-var true, :arglists (quote ([stem rules intact]))}, apply-rules {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lancaster.cljc", :line 68, :column 8, :end-line 68, :end-column 19, :private true, :arglists (quote ([string])), :doc "Applying the above rules to a correctly prepped [string]."}, :private true, :name clj-fuzzy.lancaster/apply-rules, :variadic false, :file "out/clj_fuzzy/lancaster.cljc", :end-column 19, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string])), :doc "Applying the above rules to a correctly prepped [string]."}, prep-string {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lancaster.cljc", :line 81, :column 8, :end-line 81, :end-column 19, :private true, :arglists (quote ([string])), :doc "Prepare the given [string] for the stemmer by stripping it of any\n  non-alphabetical characters and applying a lowercase transformation."}, :private true, :name clj-fuzzy.lancaster/prep-string, :variadic false, :file "out/clj_fuzzy/lancaster.cljc", :end-column 19, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string])), :doc "Prepare the given [string] for the stemmer by stripping it of any\n  non-alphabetical characters and applying a lowercase transformation."}, stem {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lancaster.cljc", :line 88, :column 7, :end-line 88, :end-column 11, :arglists (quote ([word])), :doc "Stem the given [word] with the Lancaster stemming algorithm."}, :name clj-fuzzy.lancaster/stem, :variadic false, :file "out/clj_fuzzy/lancaster.cljc", :end-column 11, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :doc "Stem the given [word] with the Lancaster stemming algorithm."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:protect :else :continue :intact :stop}, :order [:intact :stop :continue :protect :else]}, :doc nil}