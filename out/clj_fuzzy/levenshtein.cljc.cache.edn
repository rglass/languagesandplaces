{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clj-fuzzy.levenshtein, :imports nil, :requires nil, :uses nil, :defs {next-row {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/levenshtein.cljc", :line 12, :column 8, :end-line 12, :end-column 16, :private true, :arglists (quote ([previous current other-seq]))}, :private true, :name clj-fuzzy.levenshtein/next-row, :variadic false, :file "out/clj_fuzzy/levenshtein.cljc", :end-column 16, :method-params ([previous current other-seq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 3, :fn-var true, :arglists (quote ([previous current other-seq]))}, distance {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/levenshtein.cljc", :line 23, :column 7, :end-line 23, :end-column 15, :arglists (quote ([sequence1 sequence2])), :doc "Compute the levenshtein distance between two [sequences]."}, :name clj-fuzzy.levenshtein/distance, :variadic false, :file "out/clj_fuzzy/levenshtein.cljc", :end-column 15, :method-params ([sequence1 sequence2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sequence1 sequence2])), :doc "Compute the levenshtein distance between two [sequences]."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}