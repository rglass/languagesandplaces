{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clj-fuzzy.lovins, :imports nil, :requires {clojure.string clojure.string, clj-fuzzy.helpers clj-fuzzy.helpers}, :uses {re-test? clj-fuzzy.helpers, batch-replace clj-fuzzy.helpers}, :defs {clean {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lovins.cljc", :line 183, :column 8, :end-line 183, :end-column 13, :private true, :arglists (quote ([word])), :doc "Clean a [word] of characters unsupported by the stemmer"}, :private true, :name clj-fuzzy.lovins/clean, :variadic false, :file "out/clj_fuzzy/lovins.cljc", :end-column 13, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :doc "Clean a [word] of characters unsupported by the stemmer"}, prep-word {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lovins.cljc", :line 189, :column 8, :end-line 189, :end-column 17, :private true, :arglists (quote ([word])), :doc "Prepare a [word] for its passage through the stemmer."}, :private true, :name clj-fuzzy.lovins/prep-word, :variadic false, :file "out/clj_fuzzy/lovins.cljc", :end-column 17, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :doc "Prepare a [word] for its passage through the stemmer."}, transformations {:name clj-fuzzy.lovins/transformations, :file "out/clj_fuzzy/lovins.cljc", :line 147, :column 1, :end-line 147, :end-column 31, :private true, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lovins.cljc", :line 147, :column 16, :end-line 147, :end-column 31, :private true}}, apply-transformations {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lovins.cljc", :line 213, :column 7, :end-line 213, :end-column 28, :arglists (quote ([stem])), :doc "Apply the algorithm's transformations to the given [stem]."}, :name clj-fuzzy.lovins/apply-transformations, :variadic false, :file "out/clj_fuzzy/lovins.cljc", :end-column 28, :method-params ([stem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stem])), :doc "Apply the algorithm's transformations to the given [stem]."}, test-suffix-fn {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lovins.cljc", :line 195, :column 8, :end-line 195, :end-column 22, :private true, :arglists (quote ([word]))}, :private true, :name clj-fuzzy.lovins/test-suffix-fn, :variadic false, :file "out/clj_fuzzy/lovins.cljc", :end-column 22, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word]))}, conditions {:name clj-fuzzy.lovins/conditions, :file "out/clj_fuzzy/lovins.cljc", :line 110, :column 1, :end-line 110, :end-column 26, :private true, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lovins.cljc", :line 110, :column 16, :end-line 110, :end-column 26, :private true}}, endings {:name clj-fuzzy.lovins/endings, :file "out/clj_fuzzy/lovins.cljc", :line 20, :column 1, :end-line 20, :end-column 23, :private true, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lovins.cljc", :line 20, :column 16, :end-line 20, :end-column 23, :private true}}, stem {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lovins.cljc", :line 220, :column 7, :end-line 220, :end-column 11, :arglists (quote ([word])), :doc "Stem the given [word] according to the algorithm."}, :name clj-fuzzy.lovins/stem, :variadic false, :file "out/clj_fuzzy/lovins.cljc", :end-column 11, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 220, :end-line 220, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :doc "Stem the given [word] according to the algorithm."}, dedouble {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lovins.cljc", :line 142, :column 8, :end-line 142, :end-column 16, :private true, :arglists (quote ([stem])), :doc "Drop double occurences of certain letters in the given [stem]."}, :private true, :name clj-fuzzy.lovins/dedouble, :variadic false, :file "out/clj_fuzzy/lovins.cljc", :end-column 16, :method-params ([stem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stem])), :doc "Drop double occurences of certain letters in the given [stem]."}, drop-suffix {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/lovins.cljc", :line 206, :column 8, :end-line 206, :end-column 19, :private true, :arglists (quote ([word])), :doc "Drop the longest suffix we can find in the given [word]."}, :private true, :name clj-fuzzy.lovins/drop-suffix, :variadic false, :file "out/clj_fuzzy/lovins.cljc", :end-column 19, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :doc "Drop the longest suffix we can find in the given [word]."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:L :M :I :CC :R :AA :O :A :F :W :Q :P :D :B :J :Z :T :C :BB :E :G :Y :X :H :V :U :S :N :K}, :order [:B :A :C :E :G :F :Z :D :BB :I :Y :J :CC :K :L :M :N :H :O :P :Q :AA :R :X :S :T :U :V :W]}, :doc nil}