{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name clj-fuzzy.schinke, :imports nil, :requires {clojure.string clojure.string, clj-fuzzy.helpers clj-fuzzy.helpers}, :uses {in? clj-fuzzy.helpers, clean-non-alphabetical clj-fuzzy.helpers, re-test? clj-fuzzy.helpers, batch-replace clj-fuzzy.helpers}, :defs {que-rules {:name clj-fuzzy.schinke/que-rules, :file "out/clj_fuzzy/schinke.cljc", :line 20, :column 1, :end-line 20, :end-column 25, :private true, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/schinke.cljc", :line 20, :column 16, :end-line 20, :end-column 25, :private true}}, simple-suffixes {:name clj-fuzzy.schinke/simple-suffixes, :file "out/clj_fuzzy/schinke.cljc", :line 29, :column 1, :end-line 29, :end-column 31, :private true, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/schinke.cljc", :line 29, :column 16, :end-line 29, :end-column 31, :private true}}, verb-suffixes {:name clj-fuzzy.schinke/verb-suffixes, :file "out/clj_fuzzy/schinke.cljc", :line 34, :column 1, :end-line 34, :end-column 29, :private true, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/schinke.cljc", :line 34, :column 16, :end-line 34, :end-column 29, :private true}}, convert {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/schinke.cljc", :line 62, :column 8, :end-line 62, :end-column 15, :private true, :arglists (quote ([stem])), :doc "Converts all occurrences of the letter 'j' to 'i' and 'v' to 'u' in the\n   given [stem]."}, :private true, :name clj-fuzzy.schinke/convert, :variadic false, :file "out/clj_fuzzy/schinke.cljc", :end-column 15, :method-params ([stem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stem])), :doc "Converts all occurrences of the letter 'j' to 'i' and 'v' to 'u' in the\n   given [stem]."}, handle-que {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/schinke.cljc", :line 68, :column 8, :end-line 68, :end-column 18, :private true, :arglists (quote ([stem])), :doc "Checks whether the given [stem] ends in -que and check whether it applies to\n   whitelist or not."}, :private true, :name clj-fuzzy.schinke/handle-que, :variadic false, :file "out/clj_fuzzy/schinke.cljc", :end-column 18, :method-params ([stem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stem])), :doc "Checks whether the given [stem] ends in -que and check whether it applies to\n   whitelist or not."}, drop-simple-suffixes {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/schinke.cljc", :line 77, :column 8, :end-line 77, :end-column 28, :private true, :arglists (quote ([stem])), :doc "Drop a first array of popular suffixes in the given [stem]."}, :private true, :name clj-fuzzy.schinke/drop-simple-suffixes, :variadic false, :file "out/clj_fuzzy/schinke.cljc", :end-column 28, :method-params ([stem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stem])), :doc "Drop a first array of popular suffixes in the given [stem]."}, drop-verb-suffixes {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/schinke.cljc", :line 84, :column 8, :end-line 84, :end-column 26, :private true, :arglists (quote ([stem])), :doc "Drop a second array of popular suffixes in the given [stem] and apply a\n   replacement in some cases."}, :private true, :name clj-fuzzy.schinke/drop-verb-suffixes, :variadic false, :file "out/clj_fuzzy/schinke.cljc", :end-column 26, :method-params ([stem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stem])), :doc "Drop a second array of popular suffixes in the given [stem] and apply a\n   replacement in some cases."}, prep-word {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/schinke.cljc", :line 96, :column 8, :end-line 96, :end-column 17, :private true, :arglists (quote ([word])), :doc "Prepare a [word] before its pass through the stemming algorithm."}, :private true, :name clj-fuzzy.schinke/prep-word, :variadic false, :file "out/clj_fuzzy/schinke.cljc", :end-column 17, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :doc "Prepare a [word] before its pass through the stemming algorithm."}, stem {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/schinke.cljc", :line 104, :column 7, :end-line 104, :end-column 11, :arglists (quote ([word])), :doc "Stem the given latin [word]."}, :name clj-fuzzy.schinke/stem, :variadic false, :file "out/clj_fuzzy/schinke.cljc", :end-column 11, :method-params ([word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([word])), :doc "Stem the given latin [word]."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:verb :noun}, :order [:noun :verb]}, :doc nil}