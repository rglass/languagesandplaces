{:rename-macros {}, :renames {}, :use-macros {intersection clojure.set, difference clojure.set}, :excludes #{}, :name clj-fuzzy.tversky, :imports nil, :requires {clojure.set clojure.set}, :uses {intersection clojure.set, difference clojure.set}, :defs {I {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/tversky.cljc", :line 13, :column 8, :end-line 13, :end-column 9, :private true, :arglists (quote ([X Y]))}, :private true, :name clj-fuzzy.tversky/I, :variadic false, :file "out/clj_fuzzy/tversky.cljc", :end-column 9, :method-params ([X Y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([X Y]))}, R {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/tversky.cljc", :line 14, :column 8, :end-line 14, :end-column 9, :private true, :arglists (quote ([X Y]))}, :private true, :name clj-fuzzy.tversky/R, :variadic false, :file "out/clj_fuzzy/tversky.cljc", :end-column 9, :method-params ([X Y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([X Y]))}, assymmetric-index {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/tversky.cljc", :line 17, :column 8, :end-line 17, :end-column 25, :private true, :arglists (quote ([seq1 seq2 alpha beta])), :doc "Compute the original assymmetric Tversky index for the given [sequences] and\n   the given [alpha] and [beta]."}, :private true, :name clj-fuzzy.tversky/assymmetric-index, :variadic false, :file "out/clj_fuzzy/tversky.cljc", :end-column 25, :method-params ([seq1 seq2 alpha beta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 4, :fn-var true, :arglists (quote ([seq1 seq2 alpha beta])), :doc "Compute the original assymmetric Tversky index for the given [sequences] and\n   the given [alpha] and [beta]."}, symmetric-index {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/tversky.cljc", :line 29, :column 8, :end-line 29, :end-column 23, :private true, :arglists (quote ([seq1 seq2 alpha beta])), :doc "Compute the symmetric variant of the Tversky undex for the given [sequences] and\n   the given [alpha] and [beta]."}, :private true, :name clj-fuzzy.tversky/symmetric-index, :variadic false, :file "out/clj_fuzzy/tversky.cljc", :end-column 23, :method-params ([seq1 seq2 alpha beta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 4, :fn-var true, :arglists (quote ([seq1 seq2 alpha beta])), :doc "Compute the symmetric variant of the Tversky undex for the given [sequences] and\n   the given [alpha] and [beta]."}, index {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/clj_fuzzy/tversky.cljc", :line 46, :column 7, :end-line 46, :end-column 12, :arglists (quote ([seq1 seq2 & {:keys [alpha beta symmetric], :or {alpha 1, beta 1, symmetric false}}])), :doc "Compute the tversky index for the given [sequences] with given [:alpha] and [:beta]\n   and in a [:symmetric] fashion or not.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(seq1 seq2 {:keys [alpha beta symmetric], :or {alpha 1, beta 1, symmetric false}})], :arglists ([seq1 seq2 & {:keys [alpha beta symmetric], :or {alpha 1, beta 1, symmetric false}}]), :arglists-meta (nil)}}, :name clj-fuzzy.tversky/index, :variadic true, :file "out/clj_fuzzy/tversky.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(seq1 seq2 {:keys [alpha beta symmetric], :or {alpha 1, beta 1, symmetric false}})], :arglists ([seq1 seq2 & {:keys [alpha beta symmetric], :or {alpha 1, beta 1, symmetric false}}]), :arglists-meta (nil)}, :method-params [(seq1 seq2 {:keys [alpha beta symmetric], :or {alpha 1, beta 1, symmetric false}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists ([seq1 seq2 & {:keys [alpha beta symmetric], :or {alpha 1, beta 1, symmetric false}}]), :doc "Compute the tversky index for the given [sequences] with given [:alpha] and [:beta]\n   and in a [:symmetric] fashion or not."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:beta :alpha :symmetric}, :order [:alpha :beta :symmetric]}, :doc nil}