{:rename-macros {}, :renames {}, :use-macros {join clojure.string}, :excludes #{}, :name mrhyde.mrhyde, :imports nil, :requires {clojure.string clojure.string, cljs.reader cljs.reader, mrhyde.guts mrhyde.guts}, :uses {join clojure.string, hyde-proto-object-marker mrhyde.guts, hyde-proto-array-marker mrhyde.guts, read-string cljs.reader}, :defs {has-cache? {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/mrhyde/mrhyde.cljs", :line 18, :column 4, :end-line 18, :end-column 14, :protocol mrhyde.mrhyde/IHyde, :doc "is there cached information attached from js mutation?", :arglists (quote ([this]))}, :protocol mrhyde.mrhyde/IHyde, :name mrhyde.mrhyde/has-cache?, :variadic false, :file "out/mrhyde/mrhyde.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "is there cached information attached from js mutation?"}, from-cache {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/mrhyde/mrhyde.cljs", :line 19, :column 4, :end-line 19, :end-column 14, :protocol mrhyde.mrhyde/IHyde, :doc "render this container with cached information", :arglists (quote ([this]))}, :protocol mrhyde.mrhyde/IHyde, :name mrhyde.mrhyde/from-cache, :variadic false, :file "out/mrhyde/mrhyde.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "render this container with cached information"}, IHyde {:meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/mrhyde/mrhyde.cljs", :line 16, :column 14, :end-line 16, :end-column 19, :doc "Container types extended with js metaprogramming", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {has-cache? [[this]], from-cache [[this]]}}}, :protocol-symbol true, :name mrhyde.mrhyde/IHyde, :file "out/mrhyde/mrhyde.cljs", :end-column 19, :column 1, :line 16, :protocol-info {:methods {has-cache? [[this]], from-cache [[this]]}}, :info nil, :end-line 16, :impls #{}, :doc "Container types extended with js metaprogramming", :jsdoc ("@interface")}, hyde? {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/mrhyde/mrhyde.cljs", :line 21, :column 16, :end-line 21, :end-column 21, :tag boolean, :arglists (quote ([x])), :doc "Returns true if coll satisfies IHyde"}, :name mrhyde.mrhyde/hyde?, :variadic false, :file "out/mrhyde/mrhyde.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :ret-tag boolean, :end-line 21, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if coll satisfies IHyde"}, hyde-array? {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/mrhyde/mrhyde.cljs", :line 25, :column 16, :end-line 25, :end-column 27, :tag boolean, :arglists (quote ([x])), :doc "Returns true if coll satisfies IHyde"}, :name mrhyde.mrhyde/hyde-array?, :variadic false, :file "out/mrhyde/mrhyde.cljs", :end-column 27, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :ret-tag boolean, :end-line 25, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if coll satisfies IHyde"}, hyde-object? {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/mrhyde/mrhyde.cljs", :line 29, :column 16, :end-line 29, :end-column 28, :tag boolean, :arglists (quote ([x])), :doc "Returns true if coll satisfies IHyde"}, :name mrhyde.mrhyde/hyde-object?, :variadic false, :file "out/mrhyde/mrhyde.cljs", :end-column 28, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :ret-tag boolean, :end-line 29, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if coll satisfies IHyde"}, toclj {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/mrhyde/mrhyde.cljs", :line 34, :column 16, :end-line 34, :end-column 21, :export true, :arglists (quote ([x])), :doc "Convert js object to cljs equivalent"}, :name mrhyde.mrhyde/toclj, :variadic false, :file "out/mrhyde/mrhyde.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Convert js object to cljs equivalent"}, tojs {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/mrhyde/mrhyde.cljs", :line 39, :column 16, :end-line 39, :end-column 20, :export true, :arglists (quote ([x])), :doc "Convert cljs object to js equivalent"}, :name mrhyde.mrhyde/tojs, :variadic false, :file "out/mrhyde/mrhyde.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Convert cljs object to js equivalent"}, cljread {:protocol-inline nil, :meta {:file "/Users/roman/Dropbox/Projects/ClojureScript/places/out/mrhyde/mrhyde.cljs", :line 44, :column 16, :end-line 44, :end-column 23, :export true, :arglists (quote ([x])), :doc "Pass a string through the cljs reader and return the result"}, :name mrhyde.mrhyde/cljread, :variadic false, :file "out/mrhyde/mrhyde.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Pass a string through the cljs reader and return the result"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:keywordize-keys}, :order [:keywordize-keys]}, :doc nil}